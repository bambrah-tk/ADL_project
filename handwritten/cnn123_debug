import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

# Load the trained CNN model
model = tf.keras.models.load_model('handwritten_cnn123.model')

# Directory containing PNG images
image_directory = 'C:/Users/User/Desktop/handwritten/three_digits'



# Iterate over PNG images in the directory
for filename in os.listdir(image_directory):
    if filename.endswith(".png"):
        # Load and preprocess the image for detection
        img_path = os.path.join(image_directory, filename)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        img = cv2.resize(img, (28 * 3, 28))  # Assuming each digit is 28 pixels wide
        img = np.invert(img)
        img = np.expand_dims(img, axis=-1)
        img = tf.keras.utils.normalize(img, axis=1)

        # Split the image into three separate digits
        digit1 = img[:, :28, :]
        digit2 = img[:, 28:56, :]
        digit3 = img[:, 56:, :]

        # Recognize each digit separately
        predictions = []
        for digit_idx, digit in enumerate([digit1, digit2, digit3]):
            prediction = model.predict(np.array([digit]))
            predicted_label = np.argmax(prediction)
            predictions.append(predicted_label)

            print(f'Digit {digit_idx + 1} - Predicted: {prediction[0]}')

            # Visualize the digit
            plt.imshow(digit[:, :, 0], cmap=plt.cm.binary)
            plt.title(f'Predicted Label: {predicted_label}')
            plt.show()

        # Concatenate the predicted labels to form the three-digit number
        three_digit_number = int(''.join(map(str, predictions)))

        # Replace 'your_actual_label' with the actual label for each image
        # For example, if the filename is '123.png', the actual label is 123.
        actual_label = int(filename.split('.')[0])

        print(f'Image: {filename}, Actual Label: {actual_label}, Predicted Label: {three_digit_number}')

        # Display the original image
        plt.imshow(np.invert(cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)), cmap=plt.cm.binary)
        plt.title('Original Image')
        plt.show()
